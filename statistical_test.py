{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "critical t = -0.30178942394218056\n",
      "critical p = 1.2356980839417697\n",
      "t = -0.3017894239421762\n",
      "p = 1.528603832116467\n",
      "Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations. Therefore, we reject the null hypothesis that there is no statistically significant difference between the two populations.\n",
      "There is significant increase\n"
     ]
    }
   ],
   "source": [
    "%matplotlib ipympl\n",
    "%matplotlib inline\n",
    "from scipy import stats\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df1=pd.read_excel(\"D:what.xlsx\")\n",
    "df2=pd.DataFrame(df1)\n",
    "a=df2['A']\n",
    "b=df2['B']\n",
    "# plt.plot(df3,df4)\n",
    "## Import the packages\n",
    "# ## Define 2 random distributions\n",
    "# #Sample Size\n",
    "N = 22\n",
    "# #Gaussian distributed data with mean = 2 and var = 1\n",
    "# a = np.random.randn(N) + 2\n",
    "# #Gaussian distributed data with with mean = 0 and var = 1\n",
    "# b = np.random.randn(N)\n",
    "\n",
    "\n",
    "## Calculate the Standard Deviation\n",
    "#Calculate the variance to get the standard deviation\n",
    "\n",
    "#For unbiased max likelihood estimate we have to divide the var by N-1, and therefore the parameter ddof = 1\n",
    "var_a = a.var(ddof=1)\n",
    "var_b = b.var(ddof=1)\n",
    "\n",
    "#std deviation\n",
    "s = np.sqrt((var_a + var_b)/2)\n",
    "s\n",
    "\n",
    "\n",
    "\n",
    "## Calculate the t-statistics\n",
    "t = (a.mean() - b.mean())/(s*np.sqrt(2/N))\n",
    "\n",
    "\n",
    "\n",
    "## Compare with the critical t-value\n",
    "#Degrees of freedom\n",
    "df = 2*N - 2\n",
    "\n",
    "#p-value after comparison with the t \n",
    "p = 1 - stats.t.cdf(t,df=df)\n",
    "\n",
    "\n",
    "print(\"critical t = \" + str(t))\n",
    "print(\"critical p = \" + str(2*p))\n",
    "#Note that we multiply the p value by 2 because its a two tail t-test\n",
    "### You can see that after comparing the t statistic with the critical t value (computed internally) we get a good p value of 0.0005 and thus we reject the null hypothesis and thus it proves that the mean of the two distributions are different and statistically significant.\n",
    "\n",
    "\n",
    "## Cross Checking with the internal scipy function\n",
    "t2, p2 = stats.ttest_ind(a,b)\n",
    "print(\"t = \" + str(t2))\n",
    "print(\"p = \" + str(2*p2))\n",
    "if t2>t:\n",
    "    print(\"Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations. Therefore, we reject the null hypothesis that there is no statistically significant difference between the two populations.\")\n",
    "    if b.mean()-a.mean()>0:\n",
    "        print('There is significant increase')\n",
    "    elif b.mean()-a.mean()==0:\n",
    "        print('No increase or decrease')\n",
    "    else:\n",
    "        print('There is significant decrease')\n",
    "else:\n",
    "    print('we Accept the null hypothesis that there is no statistically significant difference between the two populations')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t = -0.3017894239421762\n",
      "p = 1.528603832116467\n",
      "DescribeResult(nobs=22, minmax=(21.931330128205126, 84.76770833333333), mean=58.15734629953379, variance=271.495366505448, skewness=-0.3833153111966329, kurtosis=-0.6549343413025248)\n"
     ]
    }
   ],
   "source": [
    "%matplotlib ipympl\n",
    "%matplotlib inline\n",
    "from scipy import stats\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df1=pd.read_excel(\"D:what.xlsx\")\n",
    "df2=pd.DataFrame(df1)\n",
    "a=df2['A']\n",
    "b=df2['B']\n",
    "## Cross Checking with the internal scipy function\n",
    "t2, p2 = stats.ttest_ind(a,b)\n",
    "print(\"t = \" + str(t2))\n",
    "print(\"p = \" + str(2*p2))\n",
    "print(stats.describe(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DescribeResult(nobs=22, minmax=(26.125641025641023, 85.36666666666666), mean=57.14172494172494, variance=318.8087193148731, skewness=-0.0774647947125653, kurtosis=-1.118113461119433)\n",
      "DescribeResult(nobs=22, minmax=(35.5, 87.4), mean=62.42727272727273, variance=248.0182683982684, skewness=-0.22978521440389585, kurtosis=-1.0092968366115809)\n",
      "median a= 57.81282051282051\n",
      "median b= 62.0\n",
      "sd= 16.83488918456462\n",
      "critical t = -1.0413005172750862\n",
      "critical p = 1.696306651078746\n",
      "t = -1.0413005172750862\n",
      "p = 0.6073866978425082\n",
      "we Accept the null hypothesis that there is no statistically significant difference between the two populations\n"
     ]
    }
   ],
   "source": [
    "%matplotlib ipympl\n",
    "%matplotlib inline\n",
    "from scipy import stats\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df1=pd.read_excel(\"D:what.xlsx\")\n",
    "df2=pd.DataFrame(df1)\n",
    "a=df2['En1']\n",
    "b=df2['En2']\n",
    "print(stats.describe(a))\n",
    "print(stats.describe(b))\n",
    "print('median a=',a.median())\n",
    "print('median b=',b.median())\n",
    "\n",
    "# plt.plot(df3,df4)\n",
    "## Import the packages\n",
    "# ## Define 2 random distributions\n",
    "# #Sample Size\n",
    "N = 22\n",
    "# #Gaussian distributed data with mean = 2 and var = 1\n",
    "# a = np.random.randn(N) + 2\n",
    "# #Gaussian distributed data with with mean = 0 and var = 1\n",
    "# b = np.random.randn(N)\n",
    "\n",
    "\n",
    "## Calculate the Standard Deviation\n",
    "#Calculate the variance to get the standard deviation\n",
    "\n",
    "#For unbiased max likelihood estimate we have to divide the var by N-1, and therefore the parameter ddof = 1\n",
    "var_a = a.var(ddof=1)\n",
    "var_b = b.var(ddof=1)\n",
    "\n",
    "#std deviation\n",
    "s = np.sqrt((var_a + var_b)/2)\n",
    "print('sd=',s)\n",
    "\n",
    "\n",
    "\n",
    "## Calculate the t-statistics\n",
    "t = (a.mean() - b.mean())/(s*np.sqrt(2/N))\n",
    "\n",
    "\n",
    "\n",
    "## Compare with the critical t-value\n",
    "#Degrees of freedom\n",
    "df = 2*N - 2\n",
    "\n",
    "#p-value after comparison with the t \n",
    "p = 1 - stats.t.cdf(t,df=df)\n",
    "\n",
    "\n",
    "print(\"critical t = \" + str(t))\n",
    "print(\"critical p = \" + str(2*p))\n",
    "#Note that we multiply the p value by 2 because its a two tail t-test\n",
    "### You can see that after comparing the t statistic with the critical t value (computed internally) we get a good p value of 0.0005 and thus we reject the null hypothesis and thus it proves that the mean of the two distributions are different and statistically significant.\n",
    "\n",
    "\n",
    "## Cross Checking with the internal scipy function\n",
    "t2, p2 = stats.ttest_ind(a,b)\n",
    "print(\"t = \" + str(t2))\n",
    "print(\"p = \" + str(2*p2))\n",
    "if t2>t:\n",
    "    print(\"Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations. Therefore, we reject the null hypothesis that there is no statistically significant difference between the two populations.\")\n",
    "    if b.mean()-a.mean()>0:\n",
    "        print('There is significant increase')\n",
    "    elif b.mean()-a.mean()==0:\n",
    "        print('No increase or decrease')\n",
    "    else:\n",
    "        print('There is significant decrease')\n",
    "else:\n",
    "    print('we Accept the null hypothesis that there is no statistically significant difference between the two populations')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DescribeResult(nobs=22, minmax=(15.9, 90.19999999999999), mean=64.65454545454546, variance=403.84450216450216, skewness=-0.8345491217408401, kurtosis=-0.1974460992443161)\n",
      "DescribeResult(nobs=22, minmax=(21.7, 83.6), mean=58.1090909090909, variance=281.4703896103896, skewness=-0.6273509223732492, kurtosis=-0.5120749669616043)\n",
      "median a= 72.15\n",
      "median b= 62.625\n",
      "sd= 18.51100877552182\n",
      "critical t = 1.1727516891627099\n",
      "critical p = 0.24750413291602102\n",
      "t-statistics = 1.1727516891627123\n",
      "p-statistics = 0.49500826583204005\n",
      "Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations.\n",
      "There is significant decrease.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x9f4bcb0>"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib ipympl\n",
    "%matplotlib inline\n",
    "from scipy import stats\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df1=pd.read_excel(\"D:what.xlsx\")\n",
    "df2=pd.DataFrame(df1)\n",
    "a=df2['soc1']\n",
    "b=df2['soc2']\n",
    "print(stats.describe(a))\n",
    "print(stats.describe(b))\n",
    "print('median a=',a.median())\n",
    "print('median b=',b.median())\n",
    "\n",
    "# plt.plot(df3,df4)\n",
    "## Import the packages\n",
    "# ## Define 2 random distributions\n",
    "# #Sample Size\n",
    "N = 22\n",
    "# #Gaussian distributed data with mean = 2 and var = 1\n",
    "# a = np.random.randn(N) + 2\n",
    "# #Gaussian distributed data with with mean = 0 and var = 1\n",
    "# b = np.random.randn(N)\n",
    "\n",
    "\n",
    "## Calculate the Standard Deviation\n",
    "#Calculate the variance to get the standard deviation\n",
    "\n",
    "#For unbiased max likelihood estimate we have to divide the var by N-1, and therefore the parameter ddof = 1\n",
    "var_a = a.var(ddof=1)\n",
    "var_b = b.var(ddof=1)\n",
    "\n",
    "#std deviation\n",
    "s = np.sqrt((var_a + var_b)/2)\n",
    "s\n",
    "\n",
    "\n",
    "\n",
    "## Calculate the t-statistics\n",
    "t = (a.mean() - b.mean())/(s*np.sqrt(2/N))\n",
    "\n",
    "\n",
    "\n",
    "## Compare with the critical t-value\n",
    "#Degrees of freedom\n",
    "df = 2*N - 2\n",
    "\n",
    "#p-value after comparison with the t \n",
    "p = 1 - stats.t.cdf(t,df=df)\n",
    "\n",
    "\n",
    "print(\"critical t = \" + str(t))\n",
    "print(\"critical p = \" + str(2*p))\n",
    "#Note that we multiply the p value by 2 because its a two tail t-test\n",
    "### You can see that after comparing the t statistic with the critical t value (computed internally) we get a good p value of 0.0005 and thus we reject the null hypothesis and thus it proves that the mean of the two distributions are different and statistically significant.\n",
    "\n",
    "\n",
    "## Cross Checking with the internal scipy function\n",
    "t2, p2 = stats.ttest_ind(a,b)\n",
    "print(\"t-statistics = \" + str(t2))\n",
    "print(\"p-statistics = \" + str(2*p2))\n",
    "if t2>t:\n",
    "    print(\"Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations.\")\n",
    "    if b.mean()-a.mean()>0:\n",
    "        print('There is significant increase')\n",
    "    elif b.mean()-a.mean()==0:\n",
    "        print('No increase or decrease')\n",
    "    else:\n",
    "        print('There is significant decrease.')\n",
    "else:\n",
    "    print('we Accept the null hypothesis that there is no statistically significant difference between the two populations')\n",
    "    \n",
    "plt.plot(list(range(1, 23)),a,color='r',label='First')\n",
    "plt.plot(list(range(1, 23)),b,color='b',label='second')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DescribeResult(nobs=22, minmax=(21.931330128205126, 84.76770833333333), mean=58.15734629953379, variance=271.495366505448, skewness=-0.3833153111966329, kurtosis=-0.6549343413025248)\n",
      "DescribeResult(nobs=22, minmax=(32.390625, 85.63715277777779), mean=59.6526672979798, variance=268.6162434825374, skewness=-0.0070888376473129495, kurtosis=-1.1207678851856577)\n",
      "median a= 61.538421474358984\n",
      "median b= 60.85572916666666\n",
      "critical t = -0.30178942394218056\n",
      "critical p = 1.2356980839417697\n",
      "t-statistics = -0.3017894239421762\n",
      "p-statistics = 1.528603832116467\n",
      "Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations.\n",
      "There is significant increase\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0xa08f110>"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib ipympl\n",
    "%matplotlib inline\n",
    "from scipy import stats\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df1=pd.read_excel(\"D:what.xlsx\")\n",
    "df2=pd.DataFrame(df1)\n",
    "a=df2['A']\n",
    "b=df2['B']\n",
    "print(stats.describe(a))\n",
    "print(stats.describe(b))\n",
    "print('median a=',a.median())\n",
    "print('median b=',b.median())\n",
    "\n",
    "# plt.plot(df3,df4)\n",
    "## Import the packages\n",
    "# ## Define 2 random distributions\n",
    "# #Sample Size\n",
    "N = 22\n",
    "# #Gaussian distributed data with mean = 2 and var = 1\n",
    "# a = np.random.randn(N) + 2\n",
    "# #Gaussian distributed data with with mean = 0 and var = 1\n",
    "# b = np.random.randn(N)\n",
    "\n",
    "\n",
    "## Calculate the Standard Deviation\n",
    "#Calculate the variance to get the standard deviation\n",
    "\n",
    "#For unbiased max likelihood estimate we have to divide the var by N-1, and therefore the parameter ddof = 1\n",
    "var_a = a.var(ddof=1)\n",
    "var_b = b.var(ddof=1)\n",
    "\n",
    "#std deviation\n",
    "s = np.sqrt((var_a + var_b)/2)\n",
    "s\n",
    "\n",
    "\n",
    "\n",
    "## Calculate the t-statistics\n",
    "t = (a.mean() - b.mean())/(s*np.sqrt(2/N))\n",
    "\n",
    "\n",
    "\n",
    "## Compare with the critical t-value\n",
    "#Degrees of freedom\n",
    "df = 2*N - 2\n",
    "\n",
    "#p-value after comparison with the t \n",
    "p = 1 - stats.t.cdf(t,df=df)\n",
    "\n",
    "\n",
    "print(\"critical t = \" + str(t))\n",
    "print(\"critical p = \" + str(2*p))\n",
    "#Note that we multiply the p value by 2 because its a two tail t-test\n",
    "### You can see that after comparing the t statistic with the critical t value (computed internally) we get a good p value of 0.0005 and thus we reject the null hypothesis and thus it proves that the mean of the two distributions are different and statistically significant.\n",
    "\n",
    "\n",
    "## Cross Checking with the internal scipy function\n",
    "t2, p2 = stats.ttest_ind(a,b)\n",
    "print(\"t-statistics = \" + str(t2))\n",
    "print(\"p-statistics = \" + str(2*p2))\n",
    "if t2>t:\n",
    "    print(\"Here calculated t-statistic is greater than the critical t-value, the test concludes that there is a statistically significant difference between the two populations.\")\n",
    "    if b.mean()-a.mean()>0:\n",
    "        print('There is significant increase')\n",
    "    elif b.mean()-a.mean()==0:\n",
    "        print('No increase or decrease')\n",
    "    else:\n",
    "        print('There is significant decrease.')\n",
    "else:\n",
    "    print('we Accept the null hypothesis that there is no statistically significant difference between the two populations')\n",
    "    \n",
    "plt.plot(list(range(1, 23)),a,color='r',label='First term')\n",
    "plt.plot(list(range(1, 23)),b,color='b',label='second term')\n",
    "plt.title('First term Vs Second term')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('Marks obtained')\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
